USE sakila;

-- List the number of films per category
SELECT category.name, Count(*) AS film_count
FROM film_category
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name;

-- Retrieve the store ID, city, and country for each store.
SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id;

-- Determine the average running time of films for each category.
SELECT category.name, (AVG(film.length))AS average_length
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name;


-- Bonus--

-- Identify the film categories with the longest average running time.
SELECT c.name AS category, ROUND(AVG(f.length), 2) AS avg_running_time
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_running_time DESC;

-- Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT
    CASE 
        WHEN COUNT(i.inventory_id) > 0 THEN  'Yes'
        ELSE  'No'
    END AS available
FROM film f
JOIN inventory i ON f.film_id = i.film_id
WHERE f.title = 'Academy Dinosaur'
AND i.store_id = 1;

-- Provide a list of all distinct film titles, along with their availability status in the inventory
SELECT
  f.title,
  CASE
    WHEN IFNULL(inv.inventory_count, 0) > 0 THEN 'Available'
    ELSE 'NOT available'
  END AS status
FROM film f
LEFT JOIN (
    SELECT film_id, COUNT(*) AS inventory_count
    FROM inventory
    GROUP BY film_id
) inv ON f.film_id = inv.film_id;


